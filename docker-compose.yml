name: 'uniwatch-backend'
services:
  # наш django сервис
  web:
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    entrypoint: /app/entrypoint.sh
    command: gunicorn UniWatch.wsgi:application --bind 0.0.0.0:8000 --workers=3 --threads=2 --timeout=30
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    volumes:
      - .:/app
      - static-data:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
  # база данных postgres, классика
  db:
    image: postgres:15
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
  # S3 хранилище для хранения файлов
  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    networks:
      - app-network


volumes:
  db-data:
  minio-data:
  static-data:

networks:
  app-network:
    driver: bridge

